@page "/attendance/import"


@using AttendanceFaceID.Services.Models
@using AttendanceFaceID.Services.Services
@using ClosedXML.Excel

@inject AttendanceService AttendanceService

<MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
    <ActivatorContent>
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Primary"
                   DropShadow="false"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Загрузить файл
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

<MudProgressLinear Striped="true" Color="Color.Primary" Value="@_valueProgress" Class="my-7" />

@foreach (var item in _actionResults.Reverse())
{
    var type = item.IsSuccess ? Severity.Success : Severity.Warning;
    <MudAlert Class="mt-2" Variant="Variant.Outlined" Severity="type">@item.SystemMessage</MudAlert>
}

@code {

    private IList<ActionResult> _actionResults = new List<ActionResult>();
    
    private double _valueProgress;

    private async Task UploadFiles(IBrowserFile? file)
    {
        if (file != null)
        {
            // Create a MemoryStream to hold the file data
            using var memoryStream = new MemoryStream();

            // Copy the file content to memory stream asynchronously
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(memoryStream);

            // Reset position of the memory stream to the beginning
            memoryStream.Position = 0;

            // Now use the memory stream with XLWorkbook
            using var workbook = new XLWorkbook(memoryStream);
            var worksheet = workbook.Worksheet(1);
            _actionResults.Add(new ActionResult(true, "Старт импорта"));
            
            var fullCounts = worksheet.RowsUsed().Skip(1).Count();
            double perStep = 100.0 / fullCounts;
            
            foreach (var row in worksheet.RowsUsed().Skip(1))
            {
                var cells = row.CellsUsed().ToList();

                string dateTime = cells[7].Value.ToString();
                string objectInit = cells[4].Value.ToString();
                string shortName = cells[8].Value.ToString();
                string groupName = cells[6].Value.ToString();
                string faceMode = cells[9].Value.ToString();
                var result = await AttendanceService.ImportAttendance(dateTime: dateTime, objectInit: objectInit, shortName: shortName, 
                    groupName: groupName, faceMode: faceMode);
                _actionResults.Add(result);
                _valueProgress += perStep;
                await InvokeAsync(StateHasChanged);
            }

            _actionResults.Add(new ActionResult(true, "Импорт завершен"));
        }
    }

}