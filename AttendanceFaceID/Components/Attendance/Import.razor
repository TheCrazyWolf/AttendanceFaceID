@page "/attendance/import"

@using AttendanceFaceID.Services.Models
@using AttendanceFaceID.Services.Services

@inject AttendanceService AttendanceService

<PageTitle>Импорт логов из СКУДа</PageTitle>
<MudText Class="mb-4" Typo="Typo.h6">Импорт логов из СКУДа</MudText>

@if (!_isBusy)
{
    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ActivatorContent>
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Primary"
                       DropShadow="false"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                Загрузить файл
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
}

@if (_isBusy)
{
    <MudProgressLinear Striped="true" Color="Color.Primary" Value="_valueProgress" Min="0" Max="@_maxCounts" Class="my-7"/>
}

@foreach (var item in _actionResults.Reverse())
{
    var type = item.IsSuccess ? Severity.Success : Severity.Warning;
    <MudAlert Class="mt-2" Variant="Variant.Outlined" Severity="type">@item.SystemMessage</MudAlert>
}

@code {

    private readonly IList<ActionResult> _actionResults = new List<ActionResult>();

    private double _valueProgress;
    private int _maxCounts;
    private bool _isBusy;
    
    private async Task UploadFiles(IBrowserFile? file)
    {
        if (file is null) return;
        _isBusy = true;
        _valueProgress = 0;
        var rows = await AttendanceService.ReadXlsxFileAndGetRows(file);
        _actionResults.Add(new ActionResult(true, $"[{DateTime.Now}] Старт импорта"));
        _maxCounts = rows.Count();
        foreach (var row in rows)
        {
            _valueProgress++;
            var rowEventSkud = AttendanceService.TryGetRowEventSkud(row.CellsUsed().ToList());
            if (rowEventSkud is null) continue;
            var result = await AttendanceService.ImportAttendance(rowEventSkud);
            //if (!result.IsSuccess) _actionResults.Add(result);
            StateHasChanged();
        }
        _actionResults.Add(new ActionResult(true, $"[{DateTime.Now}] Импорт завершен"));
        _isBusy = false;
    }
}