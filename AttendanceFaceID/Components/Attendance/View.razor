@page "/attendance/view"


@using AttendanceFaceID.Models.DLA
@using AttendanceFaceID.Services.Services

@inject AttendanceService AttendanceService
@inject GroupService GroupService
@inject StudentsService StudentsService

<MudStack Row="true">
    <MudAutocomplete T="Group" Label="Группа" @bind-Value="_selectedGroup" SearchFunc="@SearchOnGroupTextBot"
                     Variant="Variant.Outlined"
                     ToStringFunc="@(e => e is null ? "Не выбрано" : $"{e.Name}")"
                     ShowProgressIndicator="true"/>

    <MudDateRangePicker
        Variant="Variant.Outlined"
        Label="Диапозон дат"
        @bind-DateRange="@DateRange"
        PlaceholderStart="С какого" PlaceholderEnd="По какое"/>

    <MudButton Variant="Variant.Outlined" OnClick="SearchAttendance" Color="Color.Primary">Поиск</MudButton>

</MudStack>

@if (_students.Count != 0)
{
    <MudDataGrid Class="mt-4" Items="@_students" HorizontalScrollbar="true" Bordered="true" Dense="true">
        <Columns>
            <PropertyColumn Property="x => x.ShortName" StickyLeft="true" Title="Фамилия И.О." Sortable="false" Filterable="false"/>
            @if (DateRange.Start is not null && DateRange.End is not null)
            {
                var currentDate = DateRange.Start;

                while (currentDate <= DateRange.End)
                {
                    if (currentDate.Value.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday)
                        currentDate = currentDate.Value.AddDays(1);

                    var date = currentDate;
                    <TemplateColumn T="Student" Title="@(currentDate.Value.ToString("dd.MM"))" Sortable="false" Filterable="false">
                        <CellTemplate>
                            @{
                                var result = IsAttendancedFromDate(context.Item, date.Value);
                                var color = result ? Color.Primary : Color.Error;
                                var icon = result ? Icons.Material.Outlined.Done : Icons.Material.Outlined.Close;
                                <MudIconButton Size="Size.Small" Icon="@icon" Color="@color" />
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    currentDate = currentDate.Value.Date.AddDays(1);
                }
            }
        </Columns>
    </MudDataGrid>
}


@code {

    private Group? _selectedGroup;
    private DateRange DateRange { get; set; } = new DateRange();
    private IList<Student> _students = new List<Student>();

    private async Task<IEnumerable<Group>> SearchOnGroupTextBot(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value)) return await GroupService.GetGroups();
        var groups = (await GroupService.GetGroups()).ToList();
        return groups.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task SearchAttendance()
    {
        if (_selectedGroup is null) return;
        _students = await StudentsService.GetStudentByGroup(_selectedGroup.Id);
    }

    private bool IsAttendancedFromDate(Student student, DateTime dateTime)
    {
        return AttendanceService.ExistsAttendanceOfDate(student, dateTime).GetAwaiter().GetResult();
    }
}