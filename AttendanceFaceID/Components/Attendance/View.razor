@page "/attendance/view"


@using AttendanceFaceID.Components.Attendance.Dialog
@using AttendanceFaceID.Models.DLA
@using AttendanceFaceID.Services.Services
@using ClientSamgk

@inject AttendanceService AttendanceService
@inject GroupService GroupService
@inject StudentsService StudentsService
@inject IDialogService DialogService
@inject ClientSamgkApi ClientSamgkApi

<PageTitle>Просмотр логов</PageTitle>
<MudText Class="mb-4" Typo="Typo.h6">Просмотр логов</MudText>

<MudStack Row="true">
    <MudAutocomplete T="Group" Label="Группа" ValueChanged="OnValueChangedGroup" SearchFunc="@SearchOnGroupTextBot"
                     Variant="Variant.Outlined"
                     ToStringFunc="@(e => e is null ? "Не выбрано" : $"{e.Name}")"
                     ShowProgressIndicator="true"/>

    <MudSelect T="Student" Label="Студенты"
               Variant="Variant.Outlined"
               ToStringFunc="@(e => e is null ? "Не выбрано" : $"{e.ShortName}")"
               MultiSelection="true" @bind-SelectedValues="SelectedStudents">
        <MudStack Row="true">
            <MudButton OnClick="SelectAllStudent" Variant="Variant.Text" Size="Size.Small">Все</MudButton>
            <MudButton OnClick="UncheckAllStudent" Variant="Variant.Text" Size="Size.Small">Снять</MudButton>
        </MudStack>
        @foreach (var student in _students)
        {
            <MudSelectItem T="Student" Value="@student">@student.ShortName</MudSelectItem>
        }
    </MudSelect>
    
    <MudDateRangePicker
        Variant="Variant.Outlined"
        Label="Диапозон дат"
        @bind-DateRange="@DateRange"
        PlaceholderStart="С какого" PlaceholderEnd="По какое"/>
    <MudIconButton OnClick="SearchAttendance" Size="Size.Medium" Icon="@Icons.Material.Outlined.Search" Color="Color.Primary"/>
</MudStack>

<MudStack Row="true">
    <MudCheckBox @bind-Value="_skipWeekend" Label="Скип выходные (Cб,Вс)" Color="Color.Primary"></MudCheckBox>
    <MudCheckBox @bind-Value="_userScheduleForCheckDistance" Label="Интеграция Д/О с расписанием" Color="Color.Primary"></MudCheckBox>
</MudStack>

@if (_isBusy)
{
    <MudProgressLinear Striped="true" Color="Color.Primary" Indeterminate="true" Class="my-7" />
}

@if (SelectedStudents.Count() != 0)
{
    <MudDataGrid Class="mt-4" Items="@SelectedStudents" HorizontalScrollbar="true" Bordered="true" Dense="true">
        <Columns>
            <PropertyColumn Property="x => x.ShortName" StickyLeft="true" Title="Фамилия И.О." Sortable="false" Filterable="false"/>
            @foreach (var column in _dateColumns)
            {
                <TemplateColumn T="Student" Title="@(column.Date.ToString("dd.MM"))" Sortable="false" Filterable="false">
                    <CellTemplate>
                        <div style="vertical-align: middle;text-align: center;">
                            @{
                                if (column.IsDistance)
                                {
                                    <MudButton OnClick="() => OpenDetailsHistoryFromDate(context.Item, column.Date)" Variant="Variant.Text" Size="Size.Small">д/о</MudButton>
                                }
                                else
                                {
                                    var result = IsAttendancedFromDate(context.Item, column.Date);
                                    var color = result ? Color.Primary : Color.Error;
                                    var icon = result ? Icons.Material.Outlined.Done : Icons.Material.Outlined.Close;
                                    <MudIconButton OnClick="() => OpenDetailsHistoryFromDate(context.Item, column.Date)" Size="Size.Small" Icon="@icon" Color="@color"/>
                                }
                            }
                        </div>
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>
    </MudDataGrid>
}

@code {

    private class DateColumn
    {
        public DateTime Date { get; set; }
        public bool IsDistance { get; set; }
    }

    private Group? _selectedGroup;
    private DateRange DateRange { get; set; } = new ();
    private IList<Student> _students = new List<Student>();
    private IEnumerable<Student> SelectedStudents { get; set; } = new HashSet<Student>();
    
    private List<DateColumn> _dateColumns = new();
    
    private bool _isBusy = false;
    private bool _skipWeekend = true;
    private bool _userScheduleForCheckDistance = false;
    
    private async Task<IEnumerable<Group>> SearchOnGroupTextBot(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value)) return await GroupService.GetGroups();
        var groups = (await GroupService.GetGroups()).ToList();
        return groups.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task SearchAttendance()
    {
        if (_isBusy) return;
        if (_selectedGroup is null) return;
        _isBusy = true;
        await GenerateDateColumnsAsync();
        _isBusy = false;
    }

    private void ClearList()
    {
        _students = new List<Student>();
        _dateColumns = new List<DateColumn>();
    }

    private bool IsAttendancedFromDate(Student student, DateTime dateTime)
    {
        return AttendanceService.ExistsAttendanceOfDate(student, dateTime).GetAwaiter().GetResult();
    }

    private async Task OpenDetailsHistoryFromDate(Student contextItem, DateTime date)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<AttendancesFromDate>();
        parameters.Add("StudentId", contextItem.Id);
        parameters.Add("Date", date);
        var dialog = await DialogService.ShowAsync<AttendancesFromDate>($"Просмотр {contextItem.ShortName} за {date.ToString("dd.MM.yyyy")}", parameters, options);
        await dialog.Result;
    }

    private async Task<bool> IsDistanceFromGroup(DateTime date, Group? selectedGroup)
    {
        if (selectedGroup is null) return false;
        var entityGroup = await ClientSamgkApi.Groups.GetGroupAsync(selectedGroup.Name);
        if (entityGroup is null) return false;
        var schedule = await ClientSamgkApi.Schedule.GetScheduleAsync(DateOnly.FromDateTime(date), entityGroup);
        if (!schedule.Lessons.Any()) return false;
        if (!schedule.Lessons.First().Cabs.Any()) return false;
        return schedule.Lessons.First().Cabs.First().Auditory is "дист";
    }

    private async Task GenerateDateColumnsAsync()
    {
        var currentDate = DateRange.Start;

        while (currentDate <= DateRange.End)
        {
            if (currentDate.Value.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday)
            {
                if (_skipWeekend)
                {
                    currentDate = currentDate.Value.AddDays(1);
                    continue;
                }
            }
            
            var isDistanceToday = _userScheduleForCheckDistance && await IsDistanceFromGroup(currentDate.Value, _selectedGroup);

            _dateColumns.Add(new DateColumn
            {
                Date = currentDate.Value,
                IsDistance = isDistanceToday
            });

            currentDate = currentDate.Value.Date.AddDays(1);
        }
    }

    private async Task OnValueChangedGroup(Group arg)
    {
        _selectedGroup = arg;
        ClearList();
        _students = await StudentsService.GetStudentByGroup(arg.Id);
        SelectedStudents = _students;
    }

    private Task SelectAllStudent()
    {
        SelectedStudents = _students;
        return Task.CompletedTask;
    }

    private Task UncheckAllStudent()
    {
        SelectedStudents = new HashSet<Student>();
        return Task.CompletedTask;
    }

}