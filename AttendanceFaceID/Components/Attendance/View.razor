@page "/attendance/view"


@using AttendanceFaceID.Components.Attendance.Dialog
@using AttendanceFaceID.Models.DLA
@using AttendanceFaceID.Models.Enums
@using AttendanceFaceID.Models.Extensions
@using AttendanceFaceID.Services.Enums
@using AttendanceFaceID.Services.Models.Attendances
@using AttendanceFaceID.Services.Services
@using ClientSamgk

@inject AttendanceService AttendanceService
@inject GroupService GroupService
@inject StudentsService StudentsService
@inject IDialogService DialogService

<PageTitle>Просмотр логов</PageTitle>
<MudText Class="mb-4" Typo="Typo.h6">Просмотр логов</MudText>

<MudStack Row="true">
    <MudAutocomplete T="Group" Label="Группа" ValueChanged="OnValueChangedGroup" SearchFunc="@SearchOnGroupTextBot"
                     Variant="Variant.Outlined"
                     ToStringFunc="@(e => e is null ? "Не выбрано" : $"{e.Name}")"
                     ShowProgressIndicator="true"/>

    <MudSelect T="Student" Label="Студенты"
               Variant="Variant.Outlined"
               ToStringFunc="@(e => e is null ? "Не выбрано" : $"{e.ShortName}")"
               MultiSelection="true" @bind-SelectedValues="SelectedStudents">
        <MudButton OnClick="SelectAllStudent" Variant="Variant.Text" Size="Size.Small">Все</MudButton>
        <MudButton OnClick="UncheckAllStudent" Variant="Variant.Text" Size="Size.Small">Снять</MudButton>
        @foreach (var student in _students)
        {
            <MudSelectItem T="Student" Value="@student">@student.ShortName</MudSelectItem>
        }
    </MudSelect>

    <MudDateRangePicker
        Variant="Variant.Outlined"
        Label="Диапозон дат"
        @bind-DateRange="@DateRange"
        PlaceholderStart="С какого" PlaceholderEnd="По какое"/>
    <MudIconButton OnClick="SearchAttendance" Size="Size.Medium" Icon="@Icons.Material.Outlined.Search" Color="Color.Primary"/>
</MudStack>

<MudStack Row="true">
    <MudCheckBox @bind-Value="_skipWeekend" Label="Скип выходные (Cб,Вс)" Color="Color.Primary"></MudCheckBox>
    <MudCheckBox @bind-Value="_userScheduleForCheckDistance" Label="Интеграция Д/О с расписанием" Color="Color.Primary"></MudCheckBox>
</MudStack>

@if (_isBusy)
{
    <MudProgressLinear Striped="true" Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}

@if (_dateColumns.Count != 0)
{
    <MudTable Class="mt-4" Items="_dateColumns" FixedFooter="true" HorizontalScrollbar="true" Bordered="true" Dense="true">
        <HeaderContent>
            <MudTh Class="sticky" Style="width: 350px; white-space: nowrap;">Фамилия И.О.</MudTh>
            @if (_userScheduleForCheckDistance)
            {
                <MudTh Style="width: 350px; white-space: nowrap;">Прогул (ак.час)</MudTh>
                <MudTh Style="width: 350px; white-space: nowrap;">По расп.</MudTh>
            }
            else
            {
                <MudTh Style="width: 350px; white-space: nowrap;">Прогул (дней)</MudTh>
            }
            @foreach (var resultOfDay in _dateColumns[0].Attendances)
            {
                <MudTd Class="text-center" Style="max-width: 90px; white-space: nowrap;">@resultOfDay.Date.ToString("dd.MM")</MudTd>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="sticky" Style="width: 350px; white-space: nowrap;">@context.ShortName</MudTd>
            @if (_userScheduleForCheckDistance)
            {
                <MudTd Class="text-center" Style="max-width: 90px; white-space: nowrap;">
                    @{
                        var totalHours = 0;
                        @foreach (var resultOfDay in context.Attendances.Where(x => x.AttendanceType == AttendanceEnumType.Absent))
                        {
                            totalHours += resultOfDay.TotalHoursLessons;
                        }

                        @totalHours
                    }
                </MudTd>
                <MudTd Class="text-center" Style="max-width: 90px; white-space: nowrap;">
                    @{
                        var totalHours = 0;
                        @foreach (var resultOfDay in context.Attendances)
                        {
                            totalHours += resultOfDay.TotalHoursLessons;
                        }

                        @totalHours
                    }
                </MudTd>
            }
            else
            {
                <MudTd Class="text-center" Style="max-width: 90px; white-space: nowrap;">
                    @{
                        @context.Attendances.Count(x => x.AttendanceType is AttendanceEnumType.Absent)
                        ;
                    }
                </MudTd>
            }
            @foreach (var resultOfDay in @context.Attendances)
            {
                <MudTd Class="text-center" Style="max-width: 90px; white-space: nowrap;" @onclick="() => OpenDetailsHistoryFromDate(context, resultOfDay.Date.ToDateTime(new TimeOnly()))">

                    @(resultOfDay.AttendanceType is AttendanceEnumType.Came ? string.Empty : resultOfDay.AttendanceType.GetDisplayName())

                </MudTd>
            }
        </RowTemplate>
    </MudTable>
}

@code {

    private Group? _selectedGroup;
    private DateRange DateRange { get; set; } = new();
    private IList<Student> _students = new List<Student>();
    private IEnumerable<Student> SelectedStudents { get; set; } = new HashSet<Student>();

    private IList<AttendanceStudentDetails> _dateColumns = new List<AttendanceStudentDetails>();

    private bool _isBusy = false;
    private bool _skipWeekend = true;
    private bool _userScheduleForCheckDistance = false;

    private async Task<IEnumerable<Group>> SearchOnGroupTextBot(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value)) return await GroupService.GetGroups();
        var groups = (await GroupService.GetGroups()).ToList();
        return groups.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task SearchAttendance()
    {
        if (_isBusy) return;
        if (_selectedGroup is null) return;
        _isBusy = true;
        ClearList();
        await GenerateDateColumnsAsync();
        _isBusy = false;
    }

    private void ClearList()
    {
        _students = new List<Student>();
        _dateColumns = new List<AttendanceStudentDetails>();
    }

    private async Task OpenDetailsHistoryFromDate(AttendanceStudentDetails studentId, DateTime date)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<AttendancesFromDate>();
        parameters.Add("StudentId", studentId.StudentId);
        parameters.Add("Date", date);
        var dialog = await DialogService.ShowAsync<AttendancesFromDate>($"Просмотр {studentId.ShortName} за {date.ToString("dd.MM.yyyy")}", parameters, options);
        await dialog.Result;
    }

    private async Task GenerateDateColumnsAsync()
    {
        _dateColumns = await AttendanceService.GetAttendanceResultFromDate(SelectedStudents.ToList(), _selectedGroup ?? new(), DateRange.Start ?? DateTime.Now, DateRange.End ?? DateTime.Now, _skipWeekend, _userScheduleForCheckDistance);
    }

    private async Task OnValueChangedGroup(Group arg)
    {
        _selectedGroup = arg;
        ClearList();
        _students = await StudentsService.GetStudentByGroup(arg.Id);
        SelectedStudents = _students;
    }

    private Task SelectAllStudent()
    {
        SelectedStudents = _students;
        return Task.CompletedTask;
    }

    private Task UncheckAllStudent()
    {
        SelectedStudents = new HashSet<Student>();
        return Task.CompletedTask;
    }

}