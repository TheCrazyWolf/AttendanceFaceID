@page "/students/import"

@using AttendanceFaceID.Models.DLA
@using AttendanceFaceID.Services.Models
@using AttendanceFaceID.Services.Services
@using ClosedXML.Excel

@inject StudentsService StudentService

<MudFileUpload  T="IBrowserFile" FilesChanged="UploadFiles">
    <ActivatorContent>
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Primary"
                   DropShadow="false"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Загрузить файл
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

@foreach (var item in _actionResults.Reverse())
{
    var type = item.IsSuccess ? Severity.Success : Severity.Warning;
    <MudAlert Class="mt-2" Variant="Variant.Outlined" Severity="type">@item.SystemMessage</MudAlert>
}

@code {
    
    private IList<ActionResult> _actionResults = new List<ActionResult>();
    
    private async Task UploadFiles(IBrowserFile? file)
    {
        if (file != null)
        {
            // Create a MemoryStream to hold the file data
            using var memoryStream = new MemoryStream();
            
            // Copy the file content to memory stream asynchronously
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(memoryStream);
            
            // Reset position of the memory stream to the beginning
            memoryStream.Position = 0;

            // Now use the memory stream with XLWorkbook
            using var workbook = new XLWorkbook(memoryStream);
            var worksheet = workbook.Worksheet(1);
            _actionResults.Add(new ActionResult(true, "Старт импорта"));
            
            foreach (var row in worksheet.RowsUsed().Skip(1))
            {
                var cells = row.CellsUsed().ToList();

                string lastName = cells[0].Value.ToString();
                string firstName = cells[1].Value.ToString();
                string middleName = cells[2].Value.ToString();
                string groupName = cells[3].Value.ToString();
                var studentEntity = new Student() { LastName = lastName, FirstName = firstName, MiddleName = middleName};
                var result = await StudentService.ImportStudent(studentEntity, groupName);
                _actionResults.Add(result);
               await InvokeAsync(StateHasChanged);
            }
            
            _actionResults.Add(new ActionResult(true, "Импорт завершен"));
        }
    }

}