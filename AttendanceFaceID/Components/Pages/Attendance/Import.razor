@page "/attendance/import"

@using AttendanceFaceID.Services.Models
@using AttendanceFaceID.Services.Services
@using AttendanceFaceID.Components.Common

@inject AttendanceService AttendanceService

<PageTitle>Импорт логов из СКУДа</PageTitle>
<MudText Class="mb-4" Typo="Typo.h6">Импорт логов из СКУДа</MudText>

<AlertLastDataFromDb />

@if (!_isBusy)
{
    <MudStack Row="true">
        <MudFileUpload T="IBrowserFile" Accept=".xlsx" FilesChanged="UploadFiles">
            <ActivatorContent>
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Primary"
                           DropShadow="false"
                           StartIcon="@Icons.Material.Filled.CloudUpload">
                    Загрузить файл
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
        <MudCheckBox @bind-Value="_isDebug" Label="Дебаг" Color="Color.Primary"/>
    </MudStack>
}

@if (_isBusy)
{
    <MudProgressLinear Striped="true" Indeterminate="true" Color="Color.Primary" Class="my-7"/>
}

@foreach (var item in _actionResults.Reverse())
{
    var type = item.IsSuccess ? Severity.Success : Severity.Warning;
    <MudAlert Class="mt-2" Variant="Variant.Outlined" Severity="type">@item.SystemMessage</MudAlert>
}

@code {

    private readonly IList<ActionResult> _actionResults = new List<ActionResult>();
    
    private bool _isBusy;
    private bool _isDebug;

    private async Task UploadFiles(IBrowserFile? file)
    {
        if (file is null) return;
        _isBusy = true;
        _actionResults.Add(new ActionResult(true, $"[{DateTime.Now}] Читаем файл"));
        var rows = await AttendanceService.ReadXlsxFileAndGetRows(file);
        _actionResults.Add(new ActionResult(true, $"[{DateTime.Now}] Импорт начался. Пожалуйста не перезагружайте страницу. Это может занять длительное время"));
        StateHasChanged();
        foreach (var row in rows)
        {
            var rowEventSkud = AttendanceService.TryGetRowEventSkud(row.CellsUsed().ToList());
            if (rowEventSkud is null) continue;
            var result = await AttendanceService.ImportAttendance(rowEventSkud);
            if (!_isDebug || result.IsSuccess) continue;
            _actionResults.Add(result);
            StateHasChanged();
        }
        _actionResults.Add(new ActionResult(true, $"[{DateTime.Now}] Импорт завершен"));
        _isBusy = false;
    }
}